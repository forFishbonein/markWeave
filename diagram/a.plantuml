@startuml
skinparam componentStyle rectangle
skinparam packageStyle rectangle
skinparam nodeStyle rectangle

title MarkWeave Collaborative Editor - System Architecture

' External actors
actor User as user
actor Collaborator as collab
database "MongoDB\nDatabase" as mongodb

' Frontend Layer
package "Frontend Layer" {
  component "React App" as react {
    component "Authentication\n(Login/Register)" as auth_ui
    component "Team Management\n(Home/Settings)" as team_ui
    component "Document Management\n(List/Create)" as doc_ui
    component "Real-time Editor\n(ProseMirror + Yjs)" as editor_ui
    component "Member Management" as member_ui
  }

  component "State Management" as state {
    component "AuthContext" as auth_ctx
    component "ProtectedRoute" as protected
  }

  component "API Service Layer" as api_service {
    component "HTTP Client\n(Axios/Fetch)" as http_client
    component "WebSocket Client\n(Yjs Provider)" as ws_client
  }
}

' Backend Layer
package "Backend Layer" {
  component "Express.js Server" as express {
    component "Router Layer" as router {
      component "Auth Routes\n(/api/auth/*)" as auth_routes
      component "Team Routes\n(/api/teams/*)" as team_routes
      component "Document Routes\n(/api/documents/*)" as doc_routes
    }

    component "Middleware Layer" as middleware {
      component "Authentication\nMiddleware" as auth_middleware
      component "Validation\nMiddleware" as validation_middleware
      component "Error Handler\nMiddleware" as error_middleware
    }

    component "Controller Layer" as controller {
      component "AuthController" as auth_controller
      component "TeamController" as team_controller
      component "DocumentController" as doc_controller
    }

    component "Service Layer" as service {
      component "AuthService" as auth_service
      component "TeamService" as team_service
      component "DocumentService" as doc_service
      component "PersistenceService" as persistence_service
    }
  }

  component "WebSocket Server" as websocket {
    component "Yjs WebSocket\nProvider" as yjs_provider
    component "Awareness\nProtocol" as awareness
    component "Document\nSynchronization" as doc_sync
  }
}

' Data Layer
package "Data Layer" {
  component "ODM Layer" as odm {
    component "Mongoose\nSchemas" as mongoose
    component "User Model" as user_model
    component "Team Model" as team_model
    component "Document Model" as doc_model
    component "TeamInvite Model" as invite_model
  }

  component "CRDT Layer" as crdt {
    component "Yjs CRDT\nDocument" as yjs_doc
    component "Binary State\nStorage" as binary_state
    component "JSON Content\nStorage" as json_content
  }
}

' External Services
cloud "External Services" {
  component "JWT Token\nService" as jwt
  component "Email Service\n(Future)" as email
}

' Network Protocol
cloud "Network Protocols" {
  component "HTTP/HTTPS\nREST API" as http_protocol
  component "WebSocket\nReal-time Sync" as ws_protocol
}

' User interactions
user --> react : "Web Browser"
collab --> react : "Web Browser"

' Frontend internal connections
react --> state
react --> api_service
state --> api_service

' Frontend to Backend
api_service --> http_protocol : "REST API Calls"
api_service --> ws_protocol : "Real-time Sync"

' Backend entry points
http_protocol --> express : "HTTP Requests"
ws_protocol --> websocket : "WebSocket Connections"

' Backend internal flow
express --> router
router --> middleware
middleware --> controller
controller --> service

' Service to Data
service --> odm
service --> crdt
odm --> mongodb
crdt --> mongodb

' WebSocket flow
websocket --> yjs_provider
yjs_provider --> awareness
yjs_provider --> doc_sync
doc_sync --> crdt

' External services
service --> jwt : "Token Generation"
service --> email : "Invite Emails"

' Data relationships
mongodb -up-> odm : "Database Operations"
mongodb -up-> crdt : "State Persistence"

' Real-time collaboration flow
editor_ui <--> ws_client : "Real-time Editing"
ws_client <--> ws_protocol
ws_protocol <--> websocket
websocket <--> crdt

' Authentication flow
auth_ui --> auth_ctx
auth_ctx --> api_service
api_service --> auth_routes
auth_routes --> auth_controller
auth_controller --> auth_service
auth_service --> jwt

' Team management flow
team_ui --> api_service
api_service --> team_routes
team_routes --> team_controller
team_controller --> team_service
team_service --> team_model

' Document management flow
doc_ui --> api_service
api_service --> doc_routes
doc_routes --> doc_controller
doc_controller --> doc_service
doc_service --> doc_model
doc_service --> persistence_service
persistence_service --> crdt

' Member management flow
member_ui --> api_service
team_service --> invite_model
team_service --> email

@enduml