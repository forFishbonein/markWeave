CRDT测试结果报告
生成时间: 2025/7/14 00:05:00
====================================


> mark-weave-editor@0.1.0 test:crdt
> jest --runInBand --verbose

  console.log
    --- CRDT 基准结果 ---

      at Object.log (tests/crdt/benchmark.test.js:49:11)

  console.log
    总操作数: 300

      at Object.log (tests/crdt/benchmark.test.js:50:11)

  console.log
    耗时 (ms): 275.49

      at Object.log (tests/crdt/benchmark.test.js:51:11)

  console.log
    操作 / 毫秒: 1.09

      at Object.log (tests/crdt/benchmark.test.js:52:11)

  console.log
    最终文本长度: 146

      at Object.log (tests/crdt/benchmark.test.js:53:11)

  console.log
    文本前 120 字符: nzqfpzglldzfssdrgrmykjdkweonyrjjyqldviruxxibtvplbtuaeecckjbpjljylwpqoyitpfyykmmbpsfarmdlqctppatnowkyensecbzrvgzdtnuiksyw

      at Object.log (tests/crdt/benchmark.test.js:54:11)

  console.log
    📋 测试场景: 两客户端在文档开头同时插入不同字符

      at Object.log (tests/crdt/concurrent.test.js:47:13)

  console.log
    基础文档: hello

      at Object.log (tests/crdt/concurrent.test.js:48:13)

  console.log
    A插入字符 "A" opId: 1752422702074@client

      at Object.log (tests/crdt/concurrent.test.js:58:13)

  console.log
    B插入字符 "B" opId: 1752422702075@client

      at Object.log (tests/crdt/concurrent.test.js:59:13)

  console.log
    🎯 最终结果: "helloBA"

      at Object.log (tests/crdt/concurrent.test.js:68:13)

  console.log
    
    === 最终字符排序分析 ===

      at log (tests/crdt/concurrent.test.js:11:13)

  console.log
    [0] "h" → opId: 1752422702069_0@client (时间戳: 1752422702069_0)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [1] "e" → opId: 1752422702069_1@client (时间戳: 1752422702069_1)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [2] "l" → opId: 1752422702070_2@client (时间戳: 1752422702070_2)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [3] "l" → opId: 1752422702070_3@client (时间戳: 1752422702070_3)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [4] "o" → opId: 1752422702070_4@client (时间戳: 1752422702070_4)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [5] "B" → opId: 1752422702075@client (时间戳: 1752422702075)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [6] "A" → opId: 1752422702074@client (时间戳: 1752422702074)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    🔧 准备插入基础文档

      at Object.log (tests/crdt/concurrent.test.js:86:13)

  console.log
    🔧 A客户端ychars初始长度: 0

      at Object.log (tests/crdt/concurrent.test.js:87:13)

  console.log
    🔧 A插入后长度: 9

      at Object.log (tests/crdt/concurrent.test.js:89:13)

  console.log
    🔧 A快照: start_end

      at Object.log (tests/crdt/concurrent.test.js:90:13)

  console.log
    🔧 A的字符详情:

      at Object.log (tests/crdt/concurrent.test.js:94:15)

  console.log
      [0] "s" opId:1752422702080_0@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [1] "t" opId:1752422702080_1@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [2] "a" opId:1752422702080_2@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [3] "r" opId:1752422702080_3@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [4] "t" opId:1752422702080_4@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [5] "_" opId:1752422702080_5@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [6] "e" opId:1752422702080_6@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [7] "n" opId:1752422702080_7@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
      [8] "d" opId:1752422702080_8@client

      at log (tests/crdt/concurrent.test.js:98:17)
          at Array.forEach (<anonymous>)

  console.log
    🔧 B同步后长度: 9

      at Object.log (tests/crdt/concurrent.test.js:103:13)

  console.log
    🔧 B快照: start_end

      at Object.log (tests/crdt/concurrent.test.js:104:13)

  console.log
    📋 测试场景: 两客户端在下划线后同时插入

      at Object.log (tests/crdt/concurrent.test.js:106:13)

  console.log
    基础文档: start_end

      at Object.log (tests/crdt/concurrent.test.js:107:13)

  console.log
    🔍 调试字符查找:

      at Object.log (tests/crdt/concurrent.test.js:110:13)

  console.log
    字符数组长度: 9

      at Object.log (tests/crdt/concurrent.test.js:111:13)

  console.log
      [0] "s" opId:1752422702080_0@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [1] "t" opId:1752422702080_1@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [2] "a" opId:1752422702080_2@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [3] "r" opId:1752422702080_3@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [4] "t" opId:1752422702080_4@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [5] "_" opId:1752422702080_5@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [6] "e" opId:1752422702080_6@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [7] "n" opId:1752422702080_7@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
      [8] "d" opId:1752422702080_8@client deleted:false

      at log (tests/crdt/concurrent.test.js:117:15)
          at Array.forEach (<anonymous>)

  console.log
        检查字符: "s" (是下划线吗: false)

      at log (tests/crdt/concurrent.test.js:122:15)
          at Array.find (<anonymous>)

  console.log
        检查字符: "t" (是下划线吗: false)

      at log (tests/crdt/concurrent.test.js:122:15)
          at Array.find (<anonymous>)

  console.log
        检查字符: "a" (是下划线吗: false)

      at log (tests/crdt/concurrent.test.js:122:15)
          at Array.find (<anonymous>)

  console.log
        检查字符: "r" (是下划线吗: false)

      at log (tests/crdt/concurrent.test.js:122:15)
          at Array.find (<anonymous>)

  console.log
        检查字符: "t" (是下划线吗: false)

      at log (tests/crdt/concurrent.test.js:122:15)
          at Array.find (<anonymous>)

  console.log
        检查字符: "_" (是下划线吗: true)

      at log (tests/crdt/concurrent.test.js:122:15)
          at Array.find (<anonymous>)

  console.log
    下划线字符对象: <ref *2> YMap {
      _item: <ref *1> Item {
        id: ID { client: 2642216203, clock: 20 },
        length: 1,
        origin: ID { client: 2642216203, clock: 16 },
        left: Item {
          id: [ID],
          length: 1,
          origin: [ID],
          left: [Item],
          right: [Circular *1],
          rightOrigin: null,
          parent: [YArray],
          parentSub: null,
          redone: null,
          content: [ContentType],
          info: 10
        },
        right: Item {
          id: [ID],
          length: 1,
          origin: [ID],
          left: [Circular *1],
          right: [Item],
          rightOrigin: null,
          parent: [YArray],
          parentSub: null,
          redone: null,
          content: [ContentType],
          info: 10
        },
        rightOrigin: null,
        parent: YArray {
          _item: null,
          _map: Map(0) {},
          _start: [Item],
          doc: [Doc],
          _length: 9,
          _eH: [EventHandler],
          _dEH: [EventHandler],
          _searchMarker: [Array],
          _prelimContent: null
        },
        parentSub: null,
        redone: null,
        content: ContentType { type: [Circular *2] },
        info: 10
      },
      _map: Map(3) {
        'opId' => Item {
          id: [ID],
          length: 1,
          origin: null,
          left: null,
          right: null,
          rightOrigin: null,
          parent: [Circular *2],
          parentSub: 'opId',
          redone: null,
          content: [ContentAny],
          info: 2
        },
        'ch' => Item {
          id: [ID],
          length: 1,
          origin: null,
          left: null,
          right: null,
          rightOrigin: null,
          parent: [Circular *2],
          parentSub: 'ch',
          redone: null,
          content: [ContentAny],
          info: 2
        },
        'deleted' => Item {
          id: [ID],
          length: 1,
          origin: null,
          left: null,
          right: null,
          rightOrigin: null,
          parent: [Circular *2],
          parentSub: 'deleted',
          redone: null,
          content: [ContentAny],
          info: 2
        }
      },
      _start: null,
      doc: Doc {
        _observers: Map(2) { 'load' => [Set], 'sync' => [Set] },
        gc: true,
        gcFilter: [Function: gcFilter],
        clientID: 2642216203,
        guid: '8d314f1e-f035-477c-9c91-da927a565f82',
        collectionid: null,
        share: Map(2) { 'chars' => [YArray], 'formatOps' => [YArray] },
        store: StructStore {
          clients: [Map],
          pendingStructs: null,
          pendingDs: null
        },
        _transaction: null,
        _transactionCleanups: [],
        subdocs: Set(0) {},
        _item: null,
        shouldLoad: true,
        autoLoad: false,
        meta: null,
        isLoaded: false,
        isSynced: false,
        isDestroyed: false,
        whenLoaded: Promise { <pending> },
        whenSynced: Promise { <pending> }
      },
      _length: 0,
      _eH: EventHandler { l: [] },
      _dEH: EventHandler { l: [] },
      _searchMarker: null,
      _prelimContent: null
    }

      at Object.log (tests/crdt/concurrent.test.js:130:13)

  console.log
    下划线 "_" 的opId: 1752422702080_5@client

      at Object.log (tests/crdt/concurrent.test.js:131:13)

  console.log
    插入后各自状态:

      at Object.log (tests/crdt/concurrent.test.js:137:13)

  console.log
    A: start_Xend

      at Object.log (tests/crdt/concurrent.test.js:138:13)

  console.log
    B: start_Yend

      at Object.log (tests/crdt/concurrent.test.js:139:13)

  console.log
    🎯 最终结果: "start_YXend"

      at Object.log (tests/crdt/concurrent.test.js:148:13)

  console.log
    ✅ 字符正确插入在下划线后

      at Object.log (tests/crdt/concurrent.test.js:163:15)

  console.log
    📋 测试场景: 两客户端同时插入多个字符

      at Object.log (tests/crdt/concurrent.test.js:186:13)

  console.log
    基础文档: base

      at Object.log (tests/crdt/concurrent.test.js:187:13)

  console.log
    A插入后: AAAbase

      at Object.log (tests/crdt/concurrent.test.js:193:13)

  console.log
    B插入后: BBBbase

      at Object.log (tests/crdt/concurrent.test.js:194:13)

  console.log
    🎯 最终结果: "BBBAAAbase"

      at Object.log (tests/crdt/concurrent.test.js:203:13)

  console.log
    
    === 多字符插入结果分析 ===

      at log (tests/crdt/concurrent.test.js:11:13)

  console.log
    [0] "B" → opId: 1752422702095_0@client (时间戳: 1752422702095_0)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [1] "B" → opId: 1752422702095_1@client (时间戳: 1752422702095_1)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [2] "B" → opId: 1752422702095_2@client (时间戳: 1752422702095_2)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [3] "A" → opId: 1752422702095_4@client (时间戳: 1752422702095_4)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [4] "A" → opId: 1752422702095_5@client (时间戳: 1752422702095_5)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [5] "A" → opId: 1752422702095_6@client (时间戳: 1752422702095_6)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [6] "b" → opId: 1752422702094_0@client (时间戳: 1752422702094_0)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [7] "a" → opId: 1752422702094_1@client (时间戳: 1752422702094_1)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [8] "s" → opId: 1752422702094_2@client (时间戳: 1752422702094_2)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [9] "e" → opId: 1752422702094_3@client (时间戳: 1752422702094_3)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    📋 测试场景: 三客户端在开头同时插入

      at Object.log (tests/crdt/concurrent.test.js:226:13)

  console.log
    基础文档: start

      at Object.log (tests/crdt/concurrent.test.js:227:13)

  console.log
    插入后各客户端状态:

      at Object.log (tests/crdt/concurrent.test.js:234:13)

  console.log
    A: start1

      at Object.log (tests/crdt/concurrent.test.js:235:13)

  console.log
    B: start2

      at Object.log (tests/crdt/concurrent.test.js:236:13)

  console.log
    C: start3

      at Object.log (tests/crdt/concurrent.test.js:237:13)

  console.log
    🎯 最终结果:

      at Object.log (tests/crdt/concurrent.test.js:255:13)

  console.log
    A: start123

      at Object.log (tests/crdt/concurrent.test.js:256:13)

  console.log
    B: start123

      at Object.log (tests/crdt/concurrent.test.js:257:13)

  console.log
    C: start123

      at Object.log (tests/crdt/concurrent.test.js:258:13)

  console.log
    
    === 三客户端插入排序分析 ===

      at log (tests/crdt/concurrent.test.js:11:13)

  console.log
    [0] "s" → opId: 1752422702099_0@client (时间戳: 1752422702099_0)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [1] "t" → opId: 1752422702099_1@client (时间戳: 1752422702099_1)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [2] "a" → opId: 1752422702099_2@client (时间戳: 1752422702099_2)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [3] "r" → opId: 1752422702099_3@client (时间戳: 1752422702099_3)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [4] "t" → opId: 1752422702099_4@client (时间戳: 1752422702099_4)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [5] "1" → opId: 1752422702100@client (时间戳: 1752422702100)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [6] "2" → opId: 1752422702100@client (时间戳: 1752422702100)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [7] "3" → opId: 1752422702100@client (时间戳: 1752422702100)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    ✅ 字符插入在文档末尾（修改后的行为）

      at Object.log (tests/crdt/concurrent.test.js:271:15)

  console.log
    📋 测试场景: 模拟两用户快速连续输入

      at Object.log (tests/crdt/concurrent.test.js:289:13)

  console.log
    基础文档: doc

      at Object.log (tests/crdt/concurrent.test.js:290:13)

  console.log
    快速输入后:

      at Object.log (tests/crdt/concurrent.test.js:300:13)

  console.log
    A: doc_end

      at Object.log (tests/crdt/concurrent.test.js:301:13)

  console.log
    B: doc!

      at Object.log (tests/crdt/concurrent.test.js:302:13)

  console.log
    🎯 最终结果: "doc!_end"

      at Object.log (tests/crdt/concurrent.test.js:311:13)

  console.log
    📝 分析结果: "doc!_end"

      at Object.log (tests/crdt/concurrent.test.js:325:13)

  console.log
    ✅ 字符按预期顺序插入

      at Object.log (tests/crdt/concurrent.test.js:327:15)

  console.log
    📋 测试场景: 混合并发操作 - A插入，B删除

      at Object.log (tests/crdt/concurrent.test.js:343:13)

  console.log
    基础文档: hello world

      at Object.log (tests/crdt/concurrent.test.js:344:13)

  console.log
    操作后:

      at Object.log (tests/crdt/concurrent.test.js:350:13)

  console.log
    A: hello worldX

      at Object.log (tests/crdt/concurrent.test.js:351:13)

  console.log
    B: helloorld

      at Object.log (tests/crdt/concurrent.test.js:352:13)

  console.log
    🎯 最终结果: "helloorldX"

      at Object.log (tests/crdt/concurrent.test.js:361:13)

  console.log
    
    === 混合操作后的可见字符 ===

      at log (tests/crdt/concurrent.test.js:11:13)

  console.log
    [0] "h" → opId: 1752422702110_0@client (时间戳: 1752422702110_0)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [1] "e" → opId: 1752422702110_1@client (时间戳: 1752422702110_1)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [2] "l" → opId: 1752422702110_2@client (时间戳: 1752422702110_2)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [3] "l" → opId: 1752422702110_3@client (时间戳: 1752422702110_3)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [4] "o" → opId: 1752422702110_4@client (时间戳: 1752422702110_4)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [5] "o" → opId: 1752422702110_7@client (时间戳: 1752422702110_7)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [6] "r" → opId: 1752422702110_8@client (时间戳: 1752422702110_8)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [7] "l" → opId: 1752422702110_9@client (时间戳: 1752422702110_9)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [8] "d" → opId: 1752422702110_10@client (时间戳: 1752422702110_10)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    [9] "X" → opId: 1752422702110@client (时间戳: 1752422702110)

      at log (tests/crdt/concurrent.test.js:15:15)
          at Array.forEach (<anonymous>)

  console.log
    实际结果分析: "helloorldX"

      at Object.log (tests/crdt/concurrent.test.js:373:13)

  console.log
    ✅ 删除操作生效，删除了'w '字符

      at Object.log (tests/crdt/concurrent.test.js:384:15)

  console.log
    📋 测试场景: 空文档上的并发插入

      at Object.log (tests/crdt/concurrent.test.js:403:13)

  console.log
    插入后:

      at Object.log (tests/crdt/concurrent.test.js:409:13)

  console.log
    A: A

      at Object.log (tests/crdt/concurrent.test.js:410:13)

  console.log
    B: B

      at Object.log (tests/crdt/concurrent.test.js:411:13)

  console.log
    🎯 空文档并发插入结果: "BA"

      at Object.log (tests/crdt/concurrent.test.js:420:13)

  console.log
    结果长度: 2

      at Object.log (tests/crdt/concurrent.test.js:421:13)

  console.log
    📋 测试场景: 深入分析时间戳和排序规则

      at Object.log (tests/crdt/concurrent.test.js:445:13)

  console.log
    插入时间分析:

      at Object.log (tests/crdt/concurrent.test.js:454:13)

  console.log
      开始时间: 1752422702117

      at Object.log (tests/crdt/concurrent.test.js:455:13)

  console.log
      中间时间: 1752422702117 (时差: 0ms)

      at Object.log (tests/crdt/concurrent.test.js:456:13)

  console.log
      结束时间: 1752422702117 (时差: 0ms)

      at Object.log (tests/crdt/concurrent.test.js:457:13)

  console.log
    实际opId:

      at Object.log (tests/crdt/concurrent.test.js:463:13)

  console.log
      A的opId: 1752422702117@client

      at Object.log (tests/crdt/concurrent.test.js:464:13)

  console.log
      B的opId: 1752422702117@client

      at Object.log (tests/crdt/concurrent.test.js:465:13)

  console.log
    🔍 期望顺序: 按时间戳排序, 实际顺序: T2T1

      at log (tests/crdt/concurrent.test.js:24:13)

  console.log
       字符 "T2" 时间戳: 1752422702117

      at log (tests/crdt/concurrent.test.js:33:15)
          at Array.forEach (<anonymous>)

  console.log
       字符 "T1" 时间戳: 1752422702117

      at log (tests/crdt/concurrent.test.js:33:15)
          at Array.forEach (<anonymous>)

  console.log
    🎯 最终排序: "T2T1"

      at Object.log (tests/crdt/concurrent.test.js:474:13)

  console.log
    📋 测试场景: 三客户端极速并发插入

      at Object.log (tests/crdt/concurrent.test.js:484:13)

  console.log
    🔍 baseChars 长度: 4

      at Object.log (tests/crdt/concurrent.test.js:493:13)

  console.log
    🔍 baseChars: [
      { ch: 'b', opId: '1752422702122_0@client' },
      { ch: 'a', opId: '1752422702122_1@client' },
      { ch: 's', opId: '1752422702122_2@client' },
      { ch: 'e', opId: '1752422702122_3@client' }
    ]

      at Object.log (tests/crdt/concurrent.test.js:494:13)

  console.log
    🔍 lastCharId: 1752422702122_3@client

      at Object.log (tests/crdt/concurrent.test.js:503:13)

  console.log
    极速插入后状态:

      at Object.log (tests/crdt/concurrent.test.js:512:13)

  console.log
    A: baseA4A3A2A1A0

      at Object.log (tests/crdt/concurrent.test.js:513:13)

  console.log
    B: baseB4B3B2B1B0

      at Object.log (tests/crdt/concurrent.test.js:514:13)

  console.log
    C: baseC4C3C2C1C0

      at Object.log (tests/crdt/concurrent.test.js:515:13)

  console.log
    🎯 极速并发最终结果:

      at Object.log (tests/crdt/concurrent.test.js:533:13)

  console.log
    A: baseB4B3B2B1B0C4C3C2C1C0A4A3A2A1A0

      at Object.log (tests/crdt/concurrent.test.js:534:13)

  console.log
    B: baseB4B3B2B1B0C4C3C2C1C0A4A3A2A1A0

      at Object.log (tests/crdt/concurrent.test.js:535:13)

  console.log
    C: baseB4B3B2B1B0C4C3C2C1C0A4A3A2A1A0

      at Object.log (tests/crdt/concurrent.test.js:536:13)

  console.log
    📋 测试场景: 模拟网络分区和延迟同步

      at Object.log (tests/crdt/concurrent.test.js:556:13)

  console.log
    分区期间 A-B 同步后:

      at Object.log (tests/crdt/concurrent.test.js:573:13)

  console.log
    A-B 状态: start21

      at Object.log (tests/crdt/concurrent.test.js:574:13)

  console.log
    C 孤立状态: startisolated

      at Object.log (tests/crdt/concurrent.test.js:575:13)

  console.log
    网络恢复前:

      at Object.log (tests/crdt/concurrent.test.js:585:13)

  console.log
    A-B: _network_partitionedstart21

      at Object.log (tests/crdt/concurrent.test.js:586:13)

  console.log
    C: startisolated

      at Object.log (tests/crdt/concurrent.test.js:587:13)

  console.log
    🎯 网络恢复后最终状态:

      at Object.log (tests/crdt/concurrent.test.js:603:13)

  console.log
    A: _network_partitionedstartisolated21

      at Object.log (tests/crdt/concurrent.test.js:604:13)

  console.log
    B: _network_partitionedstartisolated21

      at Object.log (tests/crdt/concurrent.test.js:605:13)

  console.log
    C: _network_partitionedstartisolated21

      at Object.log (tests/crdt/concurrent.test.js:606:13)

  console.log
    📋 测试场景: 10客户端大规模并发压力测试

      at Object.log (tests/crdt/concurrent.test.js:618:13)

  console.log
    基础文档: shared_document

      at Object.log (tests/crdt/concurrent.test.js:632:13)

  console.log
    执行了 30 个并发操作

      at Object.log (tests/crdt/concurrent.test.js:653:13)

  console.log
    🎯 大规模并发最终结果:

      at Object.log (tests/crdt/concurrent.test.js:670:13)

  console.log
    最终文档: _2_2_2_0_9_2_9_0_0_2_0_0_5_2_5_0_7_2_7_0_1_2_1_0_6_2_6_0_4_24_0_8_28_0_3_2_30hd_doument

      at Object.log (tests/crdt/concurrent.test.js:671:13)

  console.log
    文档长度: 87

      at Object.log (tests/crdt/concurrent.test.js:672:13)

  console.log
    📋 测试场景: 乱序消息同步测试

      at Object.log (tests/crdt/concurrent.test.js:690:13)

  console.log
    模拟乱序同步...

      at Object.log (tests/crdt/concurrent.test.js:709:13)

  console.log
    🎯 乱序同步最终结果:

      at Object.log (tests/crdt/concurrent.test.js:731:13)

  console.log
    A: A2A1C1B2B1

      at Object.log (tests/crdt/concurrent.test.js:732:13)

  console.log
    B: A2A1C1B2B1

      at Object.log (tests/crdt/concurrent.test.js:733:13)

  console.log
    C: A2A1C1B2B1

      at Object.log (tests/crdt/concurrent.test.js:734:13)

  console.log
    📋 测试场景: 相同时间戳冲突解决

      at Object.log (tests/crdt/concurrent.test.js:752:13)

  console.log
    创建了相同时间戳的操作

      at Object.log (tests/crdt/concurrent.test.js:765:15)

  console.log
    🎯 相同时间戳冲突解决结果: BA

      at Object.log (tests/crdt/concurrent.test.js:777:15)

  console.log
    📋 测试场景: 模拟网络丢包和消息丢失

      at Object.log (tests/crdt/concurrent.test.js:794:13)

  console.log
    生成了 4 个更新

      at Object.log (tests/crdt/concurrent.test.js:815:13)

  console.log
    丢包后交付情况:

      at Object.log (tests/crdt/concurrent.test.js:837:13)

  console.log
    A收到: 0 个更新

      at Object.log (tests/crdt/concurrent.test.js:838:13)

  console.log
    B收到: 1 个更新

      at Object.log (tests/crdt/concurrent.test.js:839:13)

  console.log
    C收到: 0 个更新

      at Object.log (tests/crdt/concurrent.test.js:840:13)

  console.log
    丢包后状态:

      at Object.log (tests/crdt/concurrent.test.js:847:13)

  console.log
    A: base14

      at Object.log (tests/crdt/concurrent.test.js:848:13)

  console.log
    B: base12

      at Object.log (tests/crdt/concurrent.test.js:849:13)

  console.log
    C: base3

      at Object.log (tests/crdt/concurrent.test.js:850:13)

  console.log
    🎯 网络恢复后最终状态:

      at Object.log (tests/crdt/concurrent.test.js:863:13)

  console.log
    A: base1423

      at Object.log (tests/crdt/concurrent.test.js:864:13)

  console.log
    B: base1423

      at Object.log (tests/crdt/concurrent.test.js:865:13)

  console.log
    C: base1423

      at Object.log (tests/crdt/concurrent.test.js:866:13)

  console.log
    📋 测试场景: 模拟不同网络延迟

      at Object.log (tests/crdt/concurrent.test.js:883:13)

  console.log
    模拟按延迟顺序传输:

      at Object.log (tests/crdt/concurrent.test.js:921:13)

  console.log
    第1步: C → [A, B] (延迟50ms)

      at log (tests/crdt/concurrent.test.js:923:15)
          at Array.forEach (<anonymous>)

  console.log
      状态: A="startCA", B="startBC", C="startC"

      at log (tests/crdt/concurrent.test.js:933:15)
          at Array.forEach (<anonymous>)

  console.log
    第2步: A → [B, C] (延迟100ms)

      at log (tests/crdt/concurrent.test.js:923:15)
          at Array.forEach (<anonymous>)

  console.log
      状态: A="startCA", B="startBCA", C="startCA"

      at log (tests/crdt/concurrent.test.js:933:15)
          at Array.forEach (<anonymous>)

  console.log
    第3步: B → [A, C] (延迟300ms)

      at log (tests/crdt/concurrent.test.js:923:15)
          at Array.forEach (<anonymous>)

  console.log
      状态: A="startBCA", B="startBCA", C="startBCA"

      at log (tests/crdt/concurrent.test.js:933:15)
          at Array.forEach (<anonymous>)

  console.log
    🎯 延迟模拟最终结果:

      at Object.log (tests/crdt/concurrent.test.js:940:13)

  console.log
    A: startBCA

      at Object.log (tests/crdt/concurrent.test.js:941:13)

  console.log
    B: startBCA

      at Object.log (tests/crdt/concurrent.test.js:942:13)

  console.log
    C: startBCA

      at Object.log (tests/crdt/concurrent.test.js:943:13)

  console.log
    📋 测试场景: 模拟网络重复传输

      at Object.log (tests/crdt/concurrent.test.js:958:13)

  console.log
    原始状态: original

      at Object.log (tests/crdt/concurrent.test.js:967:13)

  console.log
    B添加X后: originalX

      at Object.log (tests/crdt/concurrent.test.js:968:13)

  console.log
    A第一次收到更新: originalX

      at Object.log (tests/crdt/concurrent.test.js:972:13)

  console.log
    模拟重复传输相同更新...

      at Object.log (tests/crdt/concurrent.test.js:975:13)

  console.log
    第2次应用后: originalX

      at Object.log (tests/crdt/concurrent.test.js:978:15)

  console.log
    第3次应用后: originalX

      at Object.log (tests/crdt/concurrent.test.js:978:15)

  console.log
    第4次应用后: originalX

      at Object.log (tests/crdt/concurrent.test.js:978:15)

  console.log
    第5次应用后: originalX

      at Object.log (tests/crdt/concurrent.test.js:978:15)

  console.log
    第6次应用后: originalX

      at Object.log (tests/crdt/concurrent.test.js:978:15)

  console.log
    🎯 重复传输处理结果:

      at Object.log (tests/crdt/concurrent.test.js:984:13)

  console.log
    A: originalX

      at Object.log (tests/crdt/concurrent.test.js:985:13)

  console.log
    B: originalX

      at Object.log (tests/crdt/concurrent.test.js:986:13)

  console.log
    📋 测试场景: 模拟网络带宽限制和批量传输

      at Object.log (tests/crdt/concurrent.test.js:1002:13)

  console.log
    生成了 20 个单独更新

      at Object.log (tests/crdt/concurrent.test.js:1011:13)

  console.log
    A当前状态: 01234567890123456789

      at Object.log (tests/crdt/concurrent.test.js:1012:13)

  console.log
    分成 4 个批次传输

      at Object.log (tests/crdt/concurrent.test.js:1021:13)

  console.log
    传输批次 1/4 (5个更新)

      at log (tests/crdt/concurrent.test.js:1025:15)
          at Array.forEach (<anonymous>)

  console.log
    批次1后B状态: 01234

      at log (tests/crdt/concurrent.test.js:1031:15)
          at Array.forEach (<anonymous>)

  console.log
    传输批次 2/4 (5个更新)

      at log (tests/crdt/concurrent.test.js:1025:15)
          at Array.forEach (<anonymous>)

  console.log
    批次2后B状态: 0123456789

      at log (tests/crdt/concurrent.test.js:1031:15)
          at Array.forEach (<anonymous>)

  console.log
    传输批次 3/4 (5个更新)

      at log (tests/crdt/concurrent.test.js:1025:15)
          at Array.forEach (<anonymous>)

  console.log
    批次3后B状态: 012345678901234

      at log (tests/crdt/concurrent.test.js:1031:15)
          at Array.forEach (<anonymous>)

  console.log
    传输批次 4/4 (5个更新)

      at log (tests/crdt/concurrent.test.js:1025:15)
          at Array.forEach (<anonymous>)

  console.log
    批次4后B状态: 01234567890123456789

      at log (tests/crdt/concurrent.test.js:1031:15)
          at Array.forEach (<anonymous>)

  console.log
    🎯 批量传输最终结果:

      at Object.log (tests/crdt/concurrent.test.js:1037:13)

  console.log
    A: 01234567890123456789

      at Object.log (tests/crdt/concurrent.test.js:1038:13)

  console.log
    B: 01234567890123456789

      at Object.log (tests/crdt/concurrent.test.js:1039:13)

  console.log
    🔍 A client rawFormatOps: [
      {
        opId: '1752422702220@client',
        action: 'addMark',
        markType: 'bold',
        start: { type: 'before', opId: '1752422702218_0@client' },
        end: { type: 'after', opId: '1752422702218_1@client' },
        timestamp: 1752422702220
      },
      {
        opId: '1752422702220@client',
        action: 'addMark',
        markType: 'em',
        start: { type: 'before', opId: '1752422702218_1@client' },
        end: { type: 'after', opId: '1752422702218_1@client' },
        timestamp: 1752422702220
      },
      {
        opId: '1752422702220@client',
        action: 'addMark',
        markType: 'link',
        start: { type: 'before', opId: '1752422702218_0@client' },
        end: { type: 'after', opId: '1752422702218_0@client' },
        attrs: { href: 'https://example.com' },
        timestamp: 1752422702220
      },
      {
        opId: '1752422702220@client',
        action: 'removeMark',
        markType: 'bold',
        start: { type: 'before', opId: '1752422702218_0@client' },
        end: { type: 'after', opId: '1752422702218_1@client' },
        timestamp: 1752422702220
      },
      {
        opId: '1752422702220@client',
        action: 'removeMark',
        markType: 'em',
        start: { type: 'before', opId: '1752422702218_1@client' },
        end: { type: 'after', opId: '1752422702218_1@client' },
        timestamp: 1752422702220
      }
    ]

      at Object.log (tests/crdt/multiMark.test.js:47:13)

  console.log
    📋 测试场景: 嵌套格式化 - 粗体包含斜体

      at Object.log (tests/crdt/multiMark.test.js:81:13)

  console.log
    🎯 嵌套格式化结果: Hello World

      at Object.log (tests/crdt/multiMark.test.js:96:13)

  console.log
    📋 测试场景: 交叉格式化 - A加粗ABC，B斜体DEF，C同时有粗体和斜体

      at Object.log (tests/crdt/multiMark.test.js:118:13)

  console.log
    🎯 交叉格式化最终结果: ABCDEF

      at Object.log (tests/crdt/multiMark.test.js:145:13)

  console.log
    📋 测试场景: remove-wins 优先级 - 多客户端格式冲突

      at Object.log (tests/crdt/multiMark.test.js:173:13)

  console.log
    🎯 remove-wins 最终结果: test

      at Object.log (tests/crdt/multiMark.test.js:204:13)

  console.log
    格式操作统计:

      at Object.log (tests/crdt/multiMark.test.js:216:13)

  console.log
    添加操作: 3

      at Object.log (tests/crdt/multiMark.test.js:217:13)

  console.log
    移除操作: 1

      at Object.log (tests/crdt/multiMark.test.js:218:13)

  console.log
    📋 测试场景: 链式格式化操作

      at Object.log (tests/crdt/multiMark.test.js:233:13)

  console.log
    第一轮同步后: This is a complex paragraph for testing.

      at Object.log (tests/crdt/multiMark.test.js:253:13)

  console.log
    🎯 链式格式化最终结果: This is a complex paragraph for testing.

      at Object.log (tests/crdt/multiMark.test.js:266:13)

  console.log
    📋 测试场景: 边界格式化 - 单字符格式

      at Object.log (tests/crdt/multiMark.test.js:286:13)

  console.log
    🎯 边界格式化结果: XY

      at Object.log (tests/crdt/multiMark.test.js:315:13)

  console.log
    📋 测试场景: 并发格式化与文本编辑混合

      at Object.log (tests/crdt/multiMark.test.js:330:13)

  console.log
    混合操作后各客户端状态:

      at Object.log (tests/crdt/multiMark.test.js:351:13)

  console.log
    A (插入): eding_tit

      at Object.log (tests/crdt/multiMark.test.js:352:13)

  console.log
    B (格式化): edit

      at Object.log (tests/crdt/multiMark.test.js:353:13)

  console.log
    C (删除+格式化): edt

      at Object.log (tests/crdt/multiMark.test.js:354:13)

  console.log
    🎯 混合场景最终结果:

      at Object.log (tests/crdt/multiMark.test.js:372:13)

  console.log
    A: eding_tt

      at Object.log (tests/crdt/multiMark.test.js:373:13)

  console.log
    B: eding_tt

      at Object.log (tests/crdt/multiMark.test.js:374:13)

  console.log
    C: eding_tt

      at Object.log (tests/crdt/multiMark.test.js:375:13)

  console.log
    🔥 convertCRDTToProseMirrorDoc 被调用

      at log (src/crdt/crdtUtils.js:26:11)

  console.log
    the newest yformatOps:  []

      at log (src/crdt/crdtUtils.js:27:11)

  console.log
    the newest ychars []

      at log (src/crdt/crdtUtils.js:32:11)

  console.log
    ✅ Generated paragraph: []

      at log (src/crdt/crdtUtils.js:105:11)

  console.log
    最后字符插入结果: sNDtartE

      at Object.log (tests/crdt/afterId.test.js:80:13)

  console.log
    链式插入结果: a132c

      at Object.log (tests/crdt/afterId.test.js:119:13)

  console.log
    删除后状态: ac

      at Object.log (tests/crdt/afterId.test.js:153:13)

  console.warn
    ⚠️ afterId 999999@invalid 未找到，插入到开头

      29 |       const afterIndex = ychars.toArray().findIndex((c) => getProp(c, "opId") === afterId);
      30 |       if (afterIndex === -1) {
    > 31 |         console.warn(`⚠️ afterId ${afterId} 未找到，插入到开头`);
         |                 ^
      32 |         index = 0;
      33 |       } else {
      34 |         // 在afterId后插入，直接插入在afterId+1的位置

      at Object.insertChar (src/crdt/crdtActions.cjs:31:17)
      at insertChar (tests/crdt/afterId.test.js:179:9)
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.toThrow (tests/crdt/afterId.test.js:180:12)

  console.log
    并发插入结果: sBAtart

      at Object.log (tests/crdt/afterId.test.js:223:13)

  console.log
    多字符插入结果: Hello Beautiful World

      at Object.log (tests/crdt/afterId.test.js:255:13)

  console.log
    🔍 初始字符: [
      { ch: 'a', opId: '1752422702409_0@client' },
      { ch: 'b', opId: '1752422702410_1@client' },
      { ch: 'c', opId: '1752422702410_2@client' },
      { ch: 'd', opId: '1752422702410_3@client' },
      { ch: 'e', opId: '1752422702410_4@client' },
      { ch: 'f', opId: '1752422702410_5@client' }
    ]

      at Object.log (tests/crdt/deleteRange.test.js:20:11)

  console.log
    🔍 最终C1状态:

      at Object.log (tests/crdt/deleteRange.test.js:39:11)

  console.log
    🔍 最终C2状态:

      at Object.log (tests/crdt/deleteRange.test.js:40:11)

